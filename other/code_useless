#def doWhat():
#     pixData = getPixData('imgs/avatar_282x282.jpg')
#     theme,percentage = MMCQ(pixData, 16).quantize()
#     h, w, _ = pixData.shape
#
#     mask = np.zeros(pixData.shape, dtype=np.uint8)
#     def dist(a, b):
#         return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2 + (a[2] - b[2]) ** 2
#     for y in range(h):
#         for x in range(w):
#             p = pixData[y,x,:]
#             ##lambda （参数）：（返回值）
#             dists = list(map(lambda t: dist(p, t), theme))
#             mask[y,x,:] = np.array(theme[dists.index(min(dists))], np.uint8)
#     plt.subplot(121), plt.imshow(pixData)
#     plt.subplot(122), plt.imshow(mask)
#     plt.show()
#
# def imgPixInColorSpace(pixData):
#     fig = plt.figure()
#     gs = gridspec.GridSpec(1, 3)
#
#     im = fig.add_subplot(gs[0,0])
#     im.imshow(pixData)
#     im.set_title("2D Image")
#
#     ax = fig.add_subplot(gs[0,1:3], projection='3d')
#     colors = np.reshape(pixData, (pixData.shape[0] * pixData.shape[1], pixData.shape[2]))
#     colors = colors / 255.0
#     ax.scatter(pixData[:,:,0], pixData[:,:,1], pixData[:,:,2], c=colors)
#     ax.set_xlabel("Red", color='red')
#     ax.set_ylabel("Green", color='green')
#     ax.set_zlabel("Blue", color='blue')
#
#     ax.set_title("Image in Color Space")
#
#     ax.set_xlim(0, 255)
#     ax.set_ylim(0, 255)
#     ax.set_zlim(0, 255)
#
#     ax.xaxis.set_ticks([])
#     ax.yaxis.set_ticks([])
#     ax.zaxis.set_ticks([])
#
#     plt.show()
#

# def testColorSpace():
#     imgfile = 'imgs/avatar_282x282.jpg'
#     pixData = getPixData(imgfile)
#     imgPixInColorSpace(cv.resize(pixData, None, fx=0.2, fy=0.2))

# def imgPalette(imgs, themes, titles):
#     N = len(imgs)
#
#     fig = plt.figure()
#     gs  = gridspec.GridSpec(len(imgs), len(themes)+1)  # gridspec.GridSpec(3,3)将图片划分为3行3列
#     for i in range(N):
#         im = fig.add_subplot(gs[i, 0])
#         im.imshow(imgs[i])   # imshow()预处理的图片
#         # 设置图片标题及其位置
#         im.set_title("Image %s" % str(i+1),fontsize=8)
#         im.xaxis.set_ticks([])
#         im.yaxis.set_ticks([])
#
#         t = 1
#         for themeLst in themes:
#             theme=themeLst[i]
#             pale = np.zeros(imgs[i].shape, dtype=np.uint8)   #图像RGB值的数组大小，后面的意思是展示图片
#             h, w, _ = pale.shape
#             ph  = h / (len(theme))
#             for y in range(h):
#                 pale[y,:,:] = np.array(theme[int(y / ph)][0:3], dtype=np.uint8)    #展示颜色
#             pl = fig.add_subplot(gs[i, t])
#             pl.imshow(pale)
#             pl.set_title(titles[t-1],fontsize=8)
#             pl.xaxis.set_ticks([])   # 设置坐标轴
#             pl.yaxis.set_ticks([])
#             print(theme)
#
#             t += 1
#         fig.subplots_adjust(wspace=0.3, hspace=0.3)
#     plt.show()


# def recognition(picture_num,maxColor,themes):
#     dict={}
#     num=0
#     for k in range(picture_num):
#         for themelist in themes:
#             theme=themelist[k]
#             clall = 0
#             for i in range(maxColor):
#                 w_distance = pow((pow(255 - theme[i][0], 2) + pow(255 - theme[i][1], 2) + pow(255 - theme[i][2], 2)),
#                                  1 / 3)
#                 c_distance = pow((pow(theme[i][0], 2) + pow(theme[i][1], 2) + pow(theme[i][2], 2)), 1 / 3)
#                 if (theme[i][0] > 127):
#                     if (theme[i][1] < 127):
#                         cla = theme[i][3] * w_distance
#                     else:
#                         cla = (1 / w_distance) * theme[i][3]
#                 else:
#                     if (theme[i][1] > 127):
#                         cla = -theme[i][3] * c_distance
#                     else:
#                         cla = -(1 / c_distance) * theme[i][3]
#                 clall += cla
#             if (clall > 0):
#                 dict[num] = "暖色调"
#             else:
#                 dict[num] = "冷色调"
#             num+=1
#     return dict

# def testvs():
#     # picture_num=4;            #同时读取图片个数
#     maxColor = 7
#     imgs = map(lambda i: 'image/image%s.jpg' % i, range(1,picture_num+1))
#     pixDatas = list(map(getPixData, imgs))
#     themes = [testMMCQ(pixDatas, maxColor)]
#     dict=recognition(maxColor,themes)
#     print(themes)
#     print(dict)
    # percentages =list(map(lambda d: MMCQ(d, maxColor).percentage(), pixDatas))
    #imgPalette(pixDatas, themes, ["MMCQ Palette"])
    
    ## 测试语句
